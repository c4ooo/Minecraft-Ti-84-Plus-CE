#define tilemap pixelShadow

#define air 0
#define bedrock 1
#define stone 2
#define dirt 3
#define grass 4

#define WORLD_WIDTH 64
#define WORLD_HEIGHT 64

playerTileX: ;get rid of this ugly shit for use with ix
	.db 0,0,0
playerTileY:
	.db 0
playerOffsetX:
	.db 0
playerOffsetY:
	.db 0
gen_x:
	.db 0,0,0 ;first byte not set
gen_y:
	.db 0
gen_ptr:
	.db 0,0,0
loopFromX:
	.db 0,0,0
ptr_to_tile:
	.db 0,0,0
insetYdraw:
	.db 0,0,0
insetYSprite:
	.db 0
tileSelect:
	.db 0
playerDir:
	.db 0
	
#include "gen.ez80"
	
runEngine:
	ld hl,(MCTILES_pal)
	call loadPall
	ld ix,playerTileX

engineLoop:
	call keyscan

	ld a,($F5001E)
	tst a,%00000001
	jp z,engineNoDownKey
	;;DOWN
	ld hl,playerOffsetY
	ld a,(hl)
	inc a
	;inc a \ inc a \ inc a
	and $0F
	ld (hl),a
	jr nz,engineNoDownKey
	ld hl,playerTileY
	inc (hl)
	
engineNoDownKey:
	ld a,($F5001E)
	tst a,%00000010
	jp z,engineNoLeftKey
	;;LEFT
	ld hl,playerOffsetX
	ld a,(hl)
	dec a
	;dec a \ dec a \ dec a
	and $0F
	ld (hl),a
	cp $0F
	jr nz,engineNoLeftKey
	ld hl,(playerTileX)
	dec hl
	ld (playerTileX),hl

engineNoLeftKey:
	ld a,($F5001E)
	tst a,%00000100
	jp z,engineNoRightKey
	;;RIGHT
	ld hl,playerOffsetX
	ld a,(hl)
	inc a
	;inc a \ inc a \ inc a
	and $0F
	ld (hl),a
	jr nz,engineNoRightKey
	ld hl,(playerTileX)
	inc hl
	ld (playerTileX),hl
	
engineNoRightKey:
	ld a,($F5001E)
	tst a,%00001000
	jp z,engineNoUpKey
	;;UP
	ld hl,playerOffsetY
	ld a,(hl)
	dec a
	;dec a \ dec a \ dec a
	and $0F
	ld (hl),a
	cp $0F
	jr nz,engineNoUpKey
	ld hl,playerTileY
	dec (hl)
	
engineNoUpKey:
	ld a,($F50014)
	tst a,%01000000
	jp z,engineNoMathKey
	;;Look Left
	ld a,0
	ld (ix-playerTileX+playerDir),a

engineNoMathKey
	ld a,($F50018)
	tst a,%01000000
	jp z,engineNoPrgmKey
	;;look right
	ld a,1
	ld (ix-playerTileX+playerDir),a
	
engineNoPrgmKey:
	ld a,($F50016)
	tst a,%10000000
	jp z,engineNoXKey
	;;look Up
	ld a,(ix-playerTileX+tileSelect)
	cp 5
	jp z,engineNoXKey
	inc (ix-playerTileX+tileSelect)
	
engineNoXKey:
	ld a,($F50016)
	tst a,%01000000
	jp z,engineNoAppsKey
	;;look Down
	ld a,(ix-playerTileX+tileSelect)
	or a
	jp z,engineNoAppsKey
	dec (ix-playerTileX+tileSelect)

engineNoAppsKey:
	
	nop
	call drawTileMap
	nop
	
	ld hl,0
	ld l,(ix-playerTileX+playerTileY)	
	add hl,hl ;*2
	add hl,hl ;*4
	add hl,hl ;*8
	add hl,hl ;*16
	add hl,hl ;*32
	add hl,hl ;*64
	ld de,(ix-playerTileX+playerTileX) 
	add hl,de
	ld de,tilemap
	add hl,de ;hl=pointer to player tile
	ld (ix-playerTileX+ptr_to_tile),hl     
	ld hl,ptr_to_tile
	ld iy,(hl)
	
	;ld hl,cordOff(160,112) \ ld de,(VBUFF) \ add hl,de
	;
	;ld de,0
	;ld a,(ix-playerTileX+playerOffsetY)       
	;add a,a                                   
	;add a,a                                   
	;add a,a                                   
	;add a,a
	;ld e,a
	;or a
	;sbc hl,de
	;ld e,(ix-playerTileX+playerOffsetX)
	;sbc hl,de
	;ex de,hl
	
	ld de,$001400
	ld a,(ix-playerTileX+playerOffsetY)       
	add a,a                                   
	add a,a                                   
	add a,a                                   
	add a,a
	ld (ix-playerTileX+insetYsprite),a
	ld e,a	
	mlt de
	ld hl,cordOff(160,112)
	or a 
	sbc hl,de
	ld de,0
	ld e,(ix-playerTileX+playerOffsetX)
	sbc hl,de
	ld de,(VBUFF) 
	add hl,de
	
	ld a,(ix-playerTileX+playerDir)
	or a
	jp z,playerLookingLeft
	
	ld a,(ix-playerTileX+tileSelect)
	or a
	jp nz,enineNR0
	ld de,cordOff(0,16*2)
	ld bc,WORLD_WIDTH*2
	jp callRenderTileSelector
	
enineNR0:
	dec a
	jp nz,enineNR1
	ld de,cordOff(16,16*2)
	ld bc,WORLD_WIDTH*2+1
	jp callRenderTileSelector
	
enineNR1:
	dec a
	jp nz,enineNR2
	ld de,cordOff(16,16)
	ld bc,WORLD_WIDTH+1
	jp callRenderTileSelector
	
enineNR2:
	dec a
	jp nz,enineNR3
	ld de,cordOff(16,0)
	ld bc,1
	jp callRenderTileSelector
	
enineNR3:
	dec a
	jp nz,enineNR4
	ld de,cordOff(16,-16)
	ld bc,-WORLD_WIDTH+1
	jp callRenderTileSelector
	
enineNR4:
	ld de,cordOff(0,-16)
	ld bc,-WORLD_WIDTH
	jp callRenderTileSelector
	
playerLookingLeft:
	ld a,(ix-playerTileX+tileSelect)
	or a
	jp nz,enineNL0
	ld de,cordOff(0,16*2)
	ld bc,WORLD_WIDTH*2
	jp callRenderTileSelector
enineNL0:
	dec a
	jp nz,enineNL1
	ld de,cordOff(-16,16*2)
	ld bc,WORLD_WIDTH*2-1
	jp callRenderTileSelector
	
enineNL1:
	dec a
	jp nz,enineNL2
	ld de,cordOff(-16,16)
	ld bc,WORLD_WIDTH-1
	jp callRenderTileSelector
	
enineNL2:
	dec a
	jp nz,enineNL3
	ld de,cordOff(-16,0)
	ld bc,-1
	jp callRenderTileSelector
	
enineNL3:
	dec a
	jp nz,enineNL4
	ld de,cordOff(-16,-16)
	ld bc,-WORLD_WIDTH-1
	jp callRenderTileSelector
	
enineNL4:
	ld de,cordOff(0,-16)
	ld bc,-WORLD_WIDTH

callRenderTileSelector:
	add hl,de
	push bc
	call renderTileSelector
	pop  bc
	lea hl,iy
	add hl,bc
	
	ld a,($F50012)
	tst a,%00100000
	jp z,engineNo2ndKey
	ld a,3
	ld (hl),a
	
engineNo2ndKey:
	ld a,($F50014)
	tst a,%10000000
	jp z,engineNoAlphaKey
	xor a
	ld (hl),a
	
engineNoAlphaKey:
	;VBUFFOffDE(cordOff(50,5))
	;ld hl,0
	;ld l,(ix-playerTileX+playerDir)
	;ld bc,testString
	;add hl,bc
	;call renderChar
	;	
	;VBUFFOffDE(cordOff(50,5+16))
	;ld hl,0
	;ld l,(ix-playerTileX+tileSelect)
	;ld bc,testString
	;add hl,bc
	;call renderChar
	;
	;VBUFFOffDE(cordOff(50,5+32))
	;ld hl,0
	;ld l,(ix-playerTileX+playerOffsetX)
	;ld bc,testString
	;add hl,bc
	;call renderChar
	;
	;VBUFFOffDE(cordOff(50,5+48))
	;ld hl,0
	;ld l,(ix-playerTileX+playerOffsetY)
	;ld bc,testString
	;add hl,bc
	;call renderChar
	
	call flipBuffers


	ld a,($F5001C)
	tst a,%01000000
	jp z,engineLoop

	#include "pauseMenu.ez80"

testString:
 .db "0123456789ABCDEF",0