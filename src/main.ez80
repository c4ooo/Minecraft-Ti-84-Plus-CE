
.nolist 
#include "ti84pce.inc" 
.list 
#define graphBuff vram+76800
#define charColour mpLcdPalette+$FF
#define menuY textShadow	 
#define playerTileX menuY+1 			;24 bit value 
#define playerTileY playerTileX+3		;8 bit value
#define playerOfsetX playerTileY+1		;8 bit
#define playerOfsetY playerOfsetX+1		;8 bit
#define menuKeyDown playerOfsetY+1
#define tileMapBuffer menuKeyDown+1
#define BPlus1 tileMapBuffer+3
#define BPlus320 BPlus1+3
#define BPlus76798 BPlus320+3
#define BPlus76799 BPlus76798+3
#define BPlus76480 BPlus76799+3
#define tempVar0 BPlus76480+3
#define tempVar1 tempVar0+3
#define tempVar2 tempVar1+3
#define tempVar3 tempVar2+3
#define tempVar4 tempVar3+3
#define tempVar5 tempVar4+3

   .org UserMem-2 
   .db tExtTok,tAsm84CeCmp 

    di    
	ld a,lcdBpp8
    ld (mpLcdCtrl),a 

	call getTileMapBuffer
	
	;ld de,(tileMapBuffer)
	;ld hl,(BPlus320)
	;or a
	;sbc hl,de
	;xor a
	;ld (penRow),a
	;ld (penCol),a
	;call _DispHL
	
mainMenuStartUp:
    ld hl,titleScrean_paletteStart 
    ld de,mpLcdPalette 
    ld bc,titleScrean_paletteEnd-titleScrean_paletteStart 
    ldir 
	
;	ld hl,logoSprite1
;	ld de,(tileMapBuffer)
;	call drawSprite
;
;	ld b,20
;testLoop1:
;	push bc
;	call shiftTMBUp
;	pop bc
;	djnz testLoop1
;	
;	ld hl,(tileMapBuffer)
;	ld de,graphBuff
;	ld bc,320*240
;	ldir
;	call flipBuffers
;testLoop:
;	call _GetCSC
;	cp 0
;	jp z,testLoop	
;	jp exit
	
	
	ld a,1
	ld (menuY),a
	
	ld hl,$FFFC00
	ld (charColour),hl

	call renderBkgd
	ld hl,logoSprite1
	ld de, graphBuff+11224
	call drawSprite
	ld hl,logoSprite2
	ld de,graphBuff + 11349
	call drawSprite
	
	ld a,1
	ld (menuKeyDown),a
	
mainMenu:	

	ld hl,button
	ld de, cord(40,146) ;graphBuff+(146*320)+40
	call drawSprite
	
	ld hl,button
	ld de, graphBuff+(188*320)+40
	call drawSprite
			
	ld hl,button
	ld de, graphBuff+(105*320)+40
	call drawSprite
	
	ld a,(menuY)
	ld b,a
	ld hl,(105*320)+40+graphBuff-13440
	ld de,13440
Add46720ToHLWhileBNotEqualsZeroLoop:
	add hl,de
	djnz 	Add46720ToHLWhileBNotEqualsZeroLoop
	ex de,hl
	ld hl,buttonDown
	call drawSprite

	ld hl,loadWorld
	ld de, graphBuff+(105*320)+40
	call renderString
	
	ld hl,newWorld
	ld de, graphBuff+(146*320)+40
	call renderString
			
	ld hl,quitGame
	ld de, graphBuff+(188*320)+40
	call renderString

	
	call flipBuffers
	
	call keyScan
	
	ld hl,$F5001E
	ld a,(hl)
	
	tst a,%00000001
	jr z,noDownMainMenu
	ld hl,menuY
	ld a,(hl)
	cp 3
	jp z,mainMenu
	inc (hl)
	ld hl,1
	call pause
	jp mainMenu
	
noDownMainMenu:
	tst a,%00001000
	jr z,noUpMainMenu
	ld hl,menuY
	ld a,(hl)
	cp 1
	jp z,mainMenu
	dec (hl)
	ld hl,1
	call pause
	jp mainMenu
	
noUpMainMenu:
	ld hl,$F5001C
	ld a,(hl)
	tst a,%00000001
	jr z,noMainMenuEnter
	ld a,(menuY)
	dec a
	jp z,mainMenuStartUp
		;load game
	dec a
	jp z, generateWorld
	dec a
	jr z,exit
	jp mainMenu
	
noMainMenuEnter:
	tst a,%01000000
	jr nz,exitIfNotKey
			;No keys are down
	ld (menuKeyDown),a
	jp mainMenu

exitIfNotKey:
	ld a,(menuKeyDown)
	or a
	jp nz,mainMenu
exit:
   ld a,lcdBpp16 
   ld (mpLcdCtrl),a 
   call _DrawStatusBar
   ei 
   ret 
   
#include "util.ez80"
#include "imageData.ez80"
#include "engine.ez80"
#include "tileBuffUtils.ez80"

loadWorld:
 .db "Load World",0
newWorld:
 .db "New World",0
quitGame:
 .db "Quit",0
badRam:
  .db "too litle ram;",0
;  this game reqires 79KB",0
