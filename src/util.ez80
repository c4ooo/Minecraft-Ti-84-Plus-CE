;ld iy,0 \ add iy,sp \ ld hl,-XXXXXX \ add hl,sp \ ld sp,hl \ ........ \ ld sp,iy \ ret

;de = destination
;hl = sprite
render16x16:
    ld a,16
render16x16Loop:
    ld bc,16
    ldir
    ex de,hl
    ld bc,320-16
    add hl,bc 
    ex de,hl ;de=destination+(320*16)
    dec a
    jr nz,render16x16Loop
    ret
	
render16x16LastColumb:
	ld bc,(playerOfsetX)
	ld a,0
	or c
	ret z
	ld (tempVar3),bc
	ld a,16
render16x16LastColumbLoop:
	ld bc,(tempVar3)
	push hl
	push de
    ldir
    pop hl
	ld bc,320
    add hl,bc ;de=destination+(320*16)
    ex de,hl
	pop hl
	ld bc,16
	add hl,bc
    dec a
    jr nz,render16x16LastColumbLoop
    ret
	
render16x16FirstColumb:
	jp render16x16
	ld bc,(playerOfsetX)
	push hl
	ld hl,16
	or a
	sbc hl,bc
	ld (tempVar6),hl
	pop hl
	ld a,16
render16x16FirstColumbLoop:
	push hl
	push de
	
	ld bc,(tempVar6)
	add hl,bc
	ex de,hl
	add hl,bc
	ld bc,(playerOfsetX)
	ldir
	
	ld bc,16
	pop hl
	add hl,bc
	ex de,hl
	pop hl
	add hl,bc
	dec a
	jr nz,render16x16FirstColumbLoop
	ret
	
;hl string
;de location
renderString:
	
	ld a,(hl)
	cp 0
	ret z
	push hl
    push de
	call renderChar
	pop de
	ld hl,16
	add hl,de
	ex de,hl
	pop hl
	
	inc hl
;	push hl
;	ld hl,-4864
;	add hl,de
;	ex de,hl
;	pop hl

	jr renderString
	ret
	
renderChar:
;hl = char ptr
;de = location
	push de
	ld l,(hl)
	ld h,32
	mlt hl
	ld de,font-(32*32)
	add hl,de ; hl = (*hl -32 ) * 32 +font 
	pop de
	;runer112 is awsome
	
	ld b,16
renderCharLoop:
	push bc
	ld c,1
	ld b,8
	call byteLoop
	ld b,8
	ld c,1
	call byteLoop
	push hl
	ld hl,304
	add hl,de
	ex de,hl
	pop hl
	pop bc
	djnz renderCharLoop

byteLoop:
	ld a,(hl)
	and a,c
	jr z,skipWrite
	ld a,$FF
	ld (de),a
skipWrite:
	inc de
	xor a,a
	rl c
	djnz byteLoop
	inc hl
	ret

flipBuffers:
 ld hl, graphBuff
 ld de, vRam
 ld bc, 76800
 ldir
 ret

renderBkgd:
 ld b,20
 ld de,graphBuff
renderBkgdLoop:
	push bc
	ld hl,titleReapeat_sprite   ; The first sprite 
	push de
    call drawSprite
	pop de
	ld hl,16
	add hl,de
	ex de, hl
	pop bc
	djnz renderBkgdLoop
	ld hl, graphBuff
	ld de, graphBuff+5120
	ld bc, 71680
	ldir
    ret
 
keyScan: 
    ld hl,0F50000h 
    ld (hl),2      ; Set Single Scan mode 
    xor a,a 
scan_wait: 
    cp a,(hl)      ; Wait for Idle mode 
    jr nz,scan_wait 
   ret 
    
init8bpp: 
   ld hl,mpLcdPalette             ; palette mem  
   ld b,0  
_cp1555loop:  
   ld d,b  
   ld a,b  
   and %11000000  
   srl d  
   rra  
   ld e,a  
   ld a,%00011111  
   and b  
   or e  
   ld (hl),a  
   inc hl  
   ld (hl),d  
   inc hl  
   inc b  
   jr nz,_cp1555loop  
   ret 
    
clearBuff: 
 ld hl,graphBuff 
 push hl 
 pop de 
 inc de 
 ld (hl),0
 ld bc,320*240
 ldir    ; Clear vRAM 
 ret 
     
drawSprite: ;hl=sprite de=destination 
 ld bc,320/1 
 ld (NextLine+1),bc 
 ld a,(hl)      ; width 
 ld (AddMe+1),a 
 inc hl 
 ld a,(hl)      ; height 
 inc hl 
InLoop: 
 ld bc,0 
AddMe: 
 ld c,0 
 push de 
  ldir         ; hl->data 
 pop de 
 ex de,hl 
NextLine: 
  ld bc,0 
  add hl,bc 
 ex de,hl 
 dec a 
 jr nz,InLoop 
 ret

	
pause:
	inc de 
	xor a
	or d
	or e 
	jr nz,pause
	ret
 #define cord(x,y) y*320+x+graphbuff
